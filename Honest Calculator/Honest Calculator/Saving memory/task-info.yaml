type: edu
files:
- name: honest_calc.py
  visible: true
  text: "operations = [ \"+\", \"-\", \"*\", \"/\"]\nmsg_0 = \"Enter an equation\"\
    \nmsg_1 = \"Do you even know what numbers are? Stay focused!\"\nmsg_2 = \"Yes\
    \ ... an interesting math operation. You've slept through all classes, haven't\
    \ you?\"\nmsg_3 = \"Yeah... division by zero. Smart move...\"\nmsg_4 = \"Do you\
    \ want to store the result? (y / n):\" \nmsg_5 = \"Do you want to continue calculations?\
    \ (y / n):\"\nmsg_6 = \" ... lazy\"\nmsg_7 = \" ... very lazy\"\nmsg_8 = \" ...\
    \ very, very lazy\"\nmsg_9 = \"You are\"\nglobal memory \nmemory = 0\ndef second_flow(result):\n\
    \    print(msg_4)\n    global memory\n    answer = input()\n    if answer == \"\
    y\":\n        memory = result\n        third_flow()\n        return memory\n \
    \   elif answer == \"n\":\n        third_flow()\n    else:\n        second_flow(result)\
    \  \ndef third_flow():\n    global memory\n    print(msg_5)\n    answer = input()\n\
    \    if answer == \"y\":\n        first_flow()\n    elif answer == \"n\":\n  \
    \      return\n    else:\n        third_flow()\ndef check(v1, v2, v3):\n    msg=\
    \ \"\"\n    if is_one_digit(v1) and is_one_digit(v2):\n        msg = msg + msg_6\n\
    \    if (v1 == 1 or v2 == 1) and v3 == \"*\":\n        msg = msg + msg_7\n   \
    \ if (v1 == 0 or v2 == 0) and (v3 in  [\"*\", \"+\", \"-\"]):\n        msg = msg\
    \ + msg_8\n    if msg != \"\":\n        msg = msg_9 + msg\n    print(msg)\ndef\
    \ is_one_digit(v):\n    if (10 > v > -10 and  v.is_integer()== True):\n      \
    \  return True\n    else:\n        return False \ndef first_flow():\n        global\
    \ memory\n        print(msg_0)\n        calc = input()\n        x, oper, y = calc.split()\n\
    \        if x == \"M\":\n            x = memory\n        elif y == \"M\":\n  \
    \          y = memory        \n        try:\n            x = float(x)\n      \
    \      y = float(y)\n        except Exception:\n            print(msg_1)\n   \
    \         first_flow()\n        if oper not in operations:\n            print(msg_2)\n\
    \            first_flow()\n        if oper in operations:\n            check(x,y,\
    \ oper)\n            if oper == operations[0]:\n                result = x + y\n\
    \                print(result)\n                second_flow(result)  \n      \
    \      elif oper == operations[1]:\n                result = x - y\n         \
    \       print(result)\n                second_flow(result)            \n     \
    \       elif oper == operations[2]:\n                result = x * y\n        \
    \        print(result)            \n                second_flow(result)\n    \
    \        elif oper == operations[3]:\n                try:\n                 \
    \   result = x / y\n                    print(result)                \n      \
    \              second_flow(result)\n                except ZeroDivisionError:\n\
    \                    print(msg_3)\n                    first_flow()\n\nfirst_flow()"
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest import StageTest, CheckResult, WrongAnswer, dynamic_test, TestedProgram

    msg = ["Enter an equation",
           "Do you even know what numbers are? Stay focused!",
           "Yes ... an interesting math operation. You've slept through all classes, haven't you?",
           "Yeah... division by zero. Smart move...",
           "Do you want to store the result? (y / n):",
           "Do you want to continue calculations? (y / n):",
           " ... lazy",
           " ... very lazy",
           " ... very, very lazy",
           "You are",
           "Are you sure? It is only one digit! (y / n)",
           "Don't be silly! It's just one number! Add to the memory? (y / n)",
           "Last chance! Do you really want to embarrass yourself? (y / n)"
    ]


    def add_enter(txt):
        return "\n".join([txt, msg[0]])


    def add_memory(txt):
        return "\n".join([txt, msg[4]])


    data = [(("4 * 5.0", "\n".join([msg[9] + msg[6], add_memory("20.0")])), ("n", msg[5]), ("n", "")),
            (("2 + 5.5", add_memory("7.5")), ("y", msg[5]), ("y", msg[0]), ("M - 9", add_memory("-1.5")), ("n", msg[5]), ("n", "")),
            (("225 / 15", add_memory("15.0")), ("y", msg[5]), ("y",msg[0]),
             ("1 * 5", "\n".join([msg[9] + msg[6] + msg[7], add_memory("5.0")])), ("y", msg[10]), ("y", msg[11]), ("n", msg[5]), ("y", msg[0]),
            ("M - 10", add_memory("5.0")), ("y", msg[10]), ("y", msg[11]), ("y", msg[12]), ("y", msg[5]), ("y", msg[0]),
             ("M / M",  "\n".join([msg[9] + msg[6], add_memory("1.0")])), ("n", msg[5]), ("n", "")),
           ]  # (input data, msg sentence])


    class HonestCalc(StageTest):
        @dynamic_test(data=data)
        def test(self, *items):
            pr = TestedProgram()
            output = pr.start()
            if msg[0] not in output:
                return CheckResult.wrong(f"Expected: ({msg[0]});\nFound:    ({output.strip()})")
            for item in items:
                output = pr.execute(item[0])
                if item[1] != output.strip():
                    return CheckResult.wrong(f"Expected:\n{item[1]}\nFound:\n{output.strip()}")
            if not pr.is_finished():
                return CheckResult.wrong("Your program unnecessarily waiting for input.")
            return CheckResult.correct()


    if __name__ == '__main__':
        HonestCalc().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/208/stages/1043/implement#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #3

    Expected:

    Found:
    Last chance! Do you really want to embarrass yourself? (y / n)

    Please find below the output of your program during this failed test.
    Note that the '>' character indicates the beginning of the input line.

    ---

    Enter an equation
    > 225 / 15

    15.0
    Do you want to store the result? (y / n):
    > y
    Do you want to continue calculations? (y / n):
    > y
    Enter an equation
    > 1 * 5
    You are ... lazy ... very lazy
    5.0
    Do you want to store the result? (y / n):
    > y
    Are you sure? It is only one digit! (y / n)
    > y
    Don't be silly! It's just one number! Add to the memory? (y / n)
    > n
    Do you want to continue calculations? (y / n):
    > y
    Enter an equation
    > M - 10

    5.0
    Do you want to store the result? (y / n):
    > y
    Are you sure? It is only one digit! (y / n)
    > y
    Don't be silly! It's just one number! Add to the memory? (y / n)
    > y
    Last chance! Do you really want to embarrass yourself? (y / n)
    > y
    Do you want to continue calculations? (y / n):
    > y
    Enter an equation
    > M / M
    You are ... lazy
    1.0
    Do you want to store the result? (y / n):
    > n
    Do you want to continue calculations? (y / n):
    > n
    Last chance! Do you really want to embarrass yourself? (y / n)
  time: Mon, 20 Jun 2022 08:54:45 UTC
record: 4
